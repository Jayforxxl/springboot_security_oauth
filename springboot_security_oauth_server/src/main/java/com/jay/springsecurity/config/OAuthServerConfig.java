package com.jay.springsecurity.config;import com.jay.springsecurity.service.UserService;import org.apache.tomcat.util.net.openssl.ciphers.Authentication;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;import org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;import org.springframework.security.oauth2.provider.approval.ApprovalStore;import org.springframework.security.oauth2.provider.approval.JdbcApprovalStore;import org.springframework.security.oauth2.provider.client.JdbcClientDetailsService;import org.springframework.security.oauth2.provider.code.AuthorizationCodeServices;import org.springframework.security.oauth2.provider.code.JdbcAuthorizationCodeServices;import org.springframework.security.oauth2.provider.token.TokenStore;import org.springframework.security.oauth2.provider.token.store.JdbcTokenStore;import javax.sql.DataSource;@Configuration@EnableAuthorizationServerpublic class OAuthServerConfig extends AuthorizationServerConfigurerAdapter {    //数据库连接池对象    @Autowired    private DataSource dataSource;    //认证业务对象    @Autowired    private UserService userService;    //授权模式专用对象    @Autowired    private AuthenticationManager authenticationManager;    //从数据库中查询出客户端信息    @Bean    public JdbcClientDetailsService jdbcClientDetailsService(){        return new JdbcClientDetailsService(dataSource);    }    //token保存策略    @Bean    public TokenStore tokenStore(){        return new JdbcTokenStore(dataSource);    }    //授权信息保存策略    @Bean    public ApprovalStore approvalStore(){        return new JdbcApprovalStore(dataSource);    }    //授权码模式专用对象-数据来源    public AuthorizationCodeServices authorizationCodeServices(){        return new JdbcAuthorizationCodeServices(dataSource);    }    //指定客户端登录信息来源    @Override    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {        clients.withClientDetails(jdbcClientDetailsService());    }    /**     * 检测token的策略     * @param oauthServer     * @throws Exception     */    @Override public void configure(AuthorizationServerSecurityConfigurer oauthServer) throws Exception {        oauthServer.allowFormAuthenticationForClients();//运行客户端以form表单的方式传达过来,默认只接收Post请求        oauthServer.checkTokenAccess("isAuthenticated()");//检验token前提是要认证    }    /**     * OAuth2主配置信息     * @param endpoints     * @throws Exception     */    @Override    public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {        endpoints.userDetailsService(userService)                .approvalStore(approvalStore())                .authenticationManager(authenticationManager)                .authorizationCodeServices(authorizationCodeServices())                .tokenStore(tokenStore()); }}